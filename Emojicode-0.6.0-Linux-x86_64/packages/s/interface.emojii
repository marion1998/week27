📘
  Emojicode’s standard library.

  See [The s package](https://www.emojicode.org/docs/reference/the-s-package.html)
  for an introduction.
📘

📗
  Boolean
📗
🌍 📻 🕊 👌 🍇
  🐊 😛🐚👌🍆

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 👌 ➡️ 👌
  📗 Logical and. Returns true if both, this instance and *other*, are true. 📗
  🤝 other 👌 ➡️ 👌
  📗 Logical or. Returns true if this instance or *other* or both are true. 📗
  👐 other 👌 ➡️ 👌
  📗
    Inverts the boolean. Returns true if this boolean is false, and false if
    this boolean is true.
  📗
  🛅 ❗️ ❎ ➡️ 👌
🍉

📗
  Integer
📗
🌍 📻 🕊 🔢 🍇
  🐊 😛🐚🔢🍆

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 🔢 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 🔢 ➡️ 🔢
  📗 Returns the receiver plus *other*. 📗
  ➕ other 🔢 ➡️ 🔢
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 🔢 ➡️ 🔢
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 🔢 ➡️ 🔢
  📗 Returns the receiver modulus *other*. 📗
  🚮 other 🔢 ➡️ 🔢
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 🔢 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 🔢 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 🔢 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 🔢 ➡️ 👌
  📗 Returns this integer AND *other*. 📗
  ⭕ other 🔢 ➡️ 🔢
  📗 Returns this integer OR *other*. 📗
  💢 other 🔢 ➡️ 🔢
  📗 Returns this integer XOR *other*. 📗
  ❌ other 🔢 ➡️ 🔢
  📗 Returns NOT applied to this integer. 📗
  🛅 ❗️ 🚫 ➡️ 🔢
  📗 Shifts this integer by *n* bits to the left. 📗
  👈 n 🔢 ➡️ 🔢
  📗 Shifts this integer by *n* bits to the right. 📗
  👉 n 🔢 ➡️ 🔢
  📗 Returns the absolute value of this 🔢. 📗
  ❗️ 🏧 ➡️ 🔢 📻 🔤sIntAbsolute🔤
  📗
    Creates a string representation of this integer. *base* must be greater than
    or equal to 2 and less than or equal to 35.

    The digits used to represent the integer are
    `0123456789abcdefghijklmnopqrstuvxyz`.
  📗
  ❗️ 🔡 base 🔢 ➡️ 🔡 📻 🔤sIntToString🔤
  📗 Returns the double representation of this integer. 📗
  🛅 ❗️ 💯 ➡️ 💯
  📗
    Converts this integer to a symbol. The value of this integer must be a valid
    Unicode code point.
  📗
  ❗️ 🔣 ➡️ 🔣 📻 🔤sIntToSymbol🔤
  📗
    Converts this integer to a byte. The value of this integer must be in
    [-127, 127].
  📗
  ❗️ 💧 ➡️ 💧 📻 🔤sIntToByte🔤
🍉

📗
  Represents a region in memory.

  Working with 🧠 requires great care as this interface allows you to directly
  manipulate memory.

  >!N When working with this class make sure to take into account that it is
  >!N up to you to make sure that object life-time is properly managed.
  >!N Especially, pay attention to the notes for ♻️ and 🚜.

  It’s important to understand that instances of 🧠 are basically memory
  addresses. Always think of a 🧠 instance as pointing to a memory
  region. Because 🧠 instance always are addresses it is recommmended that you
  make no more copies than absolutely necessary to avoid unwanted side effects.

  It is not possible to directly manipulate or access memory addresses as this
  would interfer with the automatic memory management Emojicode provides.
📗
🌍 📻 🕊 🧠 🍇
  📗 Creates an instance by allocating *size* bytes. 📗
  ☣️ 🆕size 🔢 
  📗
    Writes *value* starting *offset* bytes past the address represented by this
    instance.

    >!H If the memory area represented is smaller than `⚖️T ➕ offset` bytes,
    >!H undefined behavior is caused!
  📗
  ☣️ ❗️ 🐷 🐚☣️T ⚪️ 🍆🛅 value T  offset 🔢  📻 🔤ejcBuiltIn🔤
  📗
    Reads a value of type T starting *bytes* bytes past the address
    represented by this instance.

    >!H If the memory area represented is smaller than `⚖️T ➕ offset` bytes,
    >!H undefined behavior is caused!
    >!H
    >!H If the value at specified location is not *exactly* of type T or,
    >!H in the case T is a class type, a subclass of T, the behavior is
    >!H undefined!
  📗
  ☣️ ❗️ 🐽 🐚☣️T ⚪️ 🍆offset 🔢 ➡️ T  📻 🔤ejcBuiltIn🔤
  📗
    Resizes this memory area.

    >!N Do not call this method if you have copies of this 🧠, i.e. if you have
    >!N multiple pointers to this area. Calling this method updates the
    >!N represented address and can invalidate all other 🧠 that pointed to this
    >!N address. Only ever call this method if there is only one 🧠 representing
    >!N the memory area.
  📗
  ☣️ ❗️ 🏗 newSize 🔢  📻 🔤ejcMemoryRealloc🔤
  📗
    Releases a value of type T that is located *offset* bytes past the
    beginning of this memory area.

    This method might not actually write to the memory, but it is crucial
    that you call it on every value that was placed in the memory area that
    you no longer need.

    >!N Release every value placed in the memory area with this method before
    >!N overwritting it or entirely abandoning this 🧠 instance!
  📗
  ☣️ ❗️ ♻ 🐚☣️T ⚪️ 🍆offset 🔢  📻 🔤ejcBuiltIn🔤
  📗
    Copies *bytes* bytes from *source* starting from *sourceOffset* to this
    instane, writing the copied bytes *destinationOffset* bytes past the
    beginning of this memory area.

    *source* may be the same as the instance on which the method is called
    and the memory area which is copied may overlap the destination area.

    >!H If the memory area represented is smaller than
    >!H `bytes ➕ destinationOffset` bytes or *source* is smaller than
    >!H `bytes ➕ sourceOffset` bytes, undefined behavior is caused!

    >!N Do not copy managed values using this method! Copy each value
    >!N individually with 🐽 and 🐷!
  📗
  ☣️ ❗️ 🚜 destinationOffset 🔢 source 🧠 sourceOffset 🔢 bytes 🔢  📻 🔤ejcBuiltIn🔤
  📗
    Sets the first *bytes* bytes starting from *offset* bytes past the address
    represented by this instance to *byteValue*.

    >!H If the memory area represented is smaller than `bytes ➕ offset` bytes,
    >!H undefined behavior is caused!
  📗
  ☣️ ❗️ ✍ byteValue 💧 offset 🔢 bytes 🔢  📻 🔤ejcBuiltIn🔤
  📗
    Compares the first *bytes* of two memory areas.

    >!H If either the memory area represented by this instance or the one
    >!H represented by *other* or both are smaller than *bytes*, undefined
    >!H behavior is caused!
  📗
  ☣️ ❗️ ↔ other 🧠 bytes 🔢 ➡️ 🔢 📻 🔤ejcMemoryCompare🔤
🍉

📗
  Represents a real number.
📗
🌍 📻 🕊 💯 🍇
  🐊 😛🐚💯🍆

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 💯 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 💯 ➡️ 💯
  📗 Returns the receiver plus *other*. 📗
  ➕ other 💯 ➡️ 💯
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 💯 ➡️ 💯
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 💯 ➡️ 💯
  📗
    Returns the floating-point remainder of the division operation
    `receiver/other`. This will always be the value of `receiver - n*other` and
    will always have the same sign as the receiver.
  📗
  🚮 other 💯 ➡️ 💯
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 💯 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 💯 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 💯 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 💯 ➡️ 👌
  📗 Returns the absolute value of this 💯. 📗
  ❗️ 🏧 ➡️ 💯 📻 🔤sRealAbsolute🔤
  📗
    Returns the sine of this 💯.
  📗
  ❗️ 📓 ➡️ 💯 📻 🔤sRealSin🔤
  📗
    Returns the cosine of this 💯.
  📗
  ❗️ 📕 ➡️ 💯 📻 🔤sRealCos🔤
  📗
    Returns the tangent of this 💯.
  📗
  ❗️ 📐 ➡️ 💯 📻 🔤sRealTan🔤
  📗
    Returns the arcsine of this 💯.
  📗
  ❗️ 📔 ➡️ 💯 📻 🔤sRealASin🔤
  📗
    Returns the arccosine of this 💯.
  📗
  ❗️ 📙 ➡️ 💯 📻 🔤sRealACos🔤
  📗
    Returns the arctangent of this 💯.
  📗
  ❗️ 📒 ➡️ 💯 📻 🔤sRealATan🔤
  📗
    Returns this 💯 to the exponent power, that is, base<sup>exponent</sup>.
  📗
  ❗️ 🏂 exponent 💯 ➡️ 💯 📻 🔤sRealPower🔤
  📗
    Returns the positive square root of this 💯.
  📗
  ❗️ ⛷ ➡️ 💯 📻 🔤sRealSqrt🔤
  📗
    Returns the smallest integer greater than or equal to this 💯.
  📗
  ❗️ 🚴 ➡️ 🔢 📻 🔤sRealCeil🔤
  📗
    Returns the largest integer less than or equal to this 💯.
  📗
  ❗️ 🚵 ➡️ 🔢 📻 🔤sRealFloor🔤
  📗
    Returns the value of this 💯 rounded to the nearest integer.

    If the fractional portion of this 💯 is 0.5 or greater, the argument is
    rounded to the next higher integer. If the fractional portion of this 💯 is
    less than 0.5, the argument is rounded to the next lower integer.
  📗
  ❗️ 🏇 ➡️ 🔢 📻 🔤sRealRound🔤
  📗
    Returns the base 2 logarithm of this 💯.
  📗
  ❗️ 🚣 ➡️ 💯 📻 🔤sRealLog2🔤
  📗
    Returns the natural (base ℇ) logarithm of this 💯.
  📗
  ❗️ 🏄 ➡️ 💯 📻 🔤sRealLn🔤
  📗
    Creates a 🔡 representation of this 💯 and the given precision – the number
    of digits after the decimal separator “.”.
  📗
  ❗️ 🔡 precision 🔢 ➡️ 🔡 📻 🔤sRealToString🔤
  📗
    Returns an approximation of 𝜋.
  📗
  🐇 ❗️ 🥧 ➡️ 💯
  📗
    Returns an approximation of ℇ (Euler’s number).
  📗
  🐇 ❗️ 🛎 ➡️ 💯
🍉

📗
  Byte
📗
🌍 📻 🕊 💧 🍇
  🐊 😛🐚💧🍆

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 💧 ➡️ 👌
  📗 Returns the receiver minus *other*. 📗
  ➖ other 💧 ➡️ 💧
  📗 Returns the receiver plus *other*. 📗
  ➕ other 💧 ➡️ 💧
  📗 Returns the receiver divided by *other*. 📗
  ➗ other 💧 ➡️ 💧
  📗 Returns the receiver multiplied by *other*. 📗
  ✖ other 💧 ➡️ 💧
  📗 Returns the receiver modulus *other*. 📗
  🚮 other 💧 ➡️ 💧
  📗 Returns true if the receiver is smaller than *other*. 📗
  ◀ other 💧 ➡️ 👌
  📗 Returns true if the receiver is greater than *other*. 📗
  ▶ other 💧 ➡️ 👌
  📗 Returns true if the receiver is smaller than or equal to *other*. 📗
  ◀🙌 other 💧 ➡️ 👌
  📗 Returns true if the receiver is greater than or equal to *other*. 📗
  ▶🙌 other 💧 ➡️ 👌
  📗 Returns this integer AND *other*. 📗
  ⭕ other 💧 ➡️ 💧
  📗 Returns this integer OR *other*. 📗
  💢 other 💧 ➡️ 💧
  📗 Returns this integer XOR *other*. 📗
  ❌ other 💧 ➡️ 💧
  📗 Returns NOT applied to this integer. 📗
  🛅 ❗️ 🚫 ➡️ 💧
  📗 Shifts this integer by *n* bits to the left. 📗
  👈 n 💧 ➡️ 💧
  📗 Shifts this integer by *n* bits to the right. 📗
  👉 n 💧 ➡️ 💧
  📗
    Converts this byte to an integer.
  📗
  ❗️ 🔢 ➡️ 🔢 📻 🔤sByteToInt🔤
🍉

📗
  Symbol
📗
🌍 📻 🕊 🔣 🍇
  🐊 😛🐚🔣🍆

  📗 Whether this value and *other* are considered equal. 📗
  🙌 other 🔣 ➡️ 👌
  📗 Whether this symbol represents a whitespace. 📗
  ❗️ 🐁 ➡️ 👌
  📗 Returns the Unicode code point of this symbol. 📗
  ❗️ 🔢 ➡️ 🔢 📻 🔤sSymbolToInt🔤
  📗 Creates a 🔡 from this symbol. 📗
  🛅 ❗️ 🔡 ➡️ 🔡
🍉

📗
  Protocol defining an iterators interface.

  Types conforming to 🍡 can iterate a collection.

  To get the items from an iterator call the 🔽 method on it, until 🔽❓ returns
  👎 which indicates that there are no more items.
📗
🌍 🐊 🍡🐚Element ⚪️ 🍆🍇
  📗
    Returns the next object. Call this method only if 🔽❓ previously
    returned 👍.
  📗
  🛅 ❗️ 🔽 ➡️ Element 
  📗
    Whether the iterator has more elements to provide.
  📗
  🛅 ❓️ 🔽 ➡️ 👌
🍉

📗
  Protocol defining iterability.

  Types whose instances shall be iterable using the 🔂 loop must
  implement this protocol.
📗
🌍 🐊 🔂🐚Element ⚪️ 🍆🍇
  📗
    This method must return an instance of a class that conforms to
    [[🍡]] which will be used to enumerate this instance.
  📗
  🛅 ❗️ 🍡 ➡️ 🍡🐚Element🍆
🍉

📗
  Protocol defining equality.

  A type conforming to this protocol provides a method 😛 to determine whether
  one of its instance is equal to an instance of type T. T is normally the
  type itself.
📗
🌍 🐊 😛🐚T ⚪️ 🍆🍇
  📗 Whether this value and *other* are equal. 📗
  🛅 🙌 🛅 other T  ➡️ 👌
🍉

📗
  Protocol defining random-access.

  Types representing a collection whose elements can be accessed by 🐽 randomly
  should conform to this protocol. The number of elements must be finite and
  returned by 🐔.
📗
🌍 🐊 🐽🐚Element ⚪️ 🍆🍇
  📗
    Gets the item at *index*. If the index is invalid the behavior is up to
    the conforming type.
  📗
  🛅 ❗️ 🐽 🛅 index 🔢 ➡️ Element 
  📗 Returns the number of items in the collection. 📗
  🛅 ❗️ 🐔 ➡️ 🔢
🍉

📗
  Iterator over a 🐽.

  This class is an iterator that can iterate over every type that conforms to
  the 🐽 protocol.
📗
🌍 🐇 🌳🐚Element ⚪️ 🍆🍇
  🐊 🍡🐚Element🍆
  🐊 🔂🐚Element🍆

  🖍🆕 iteratee 🐽🐚Element🍆
  🖍🆕 index 🔢

  🆕🍼 🛅 iteratee 🐽🐚Element🍆 
  ❗️ 🔽 ➡️ Element 
  ❓️ 🔽 ➡️ 👌
  🛅 ❗️ 🍡 ➡️ 🍡🐚Element🍆
🍉

📗
  Interaction with the operating system.

  💻 provides several class methods that can be used to interact with the
  operating system. It cannot be instantiated.
📗
🌍 🐇 💻 🍇
  📗
    Returns a list of the arguments passed to the programm. Calling this method
    is rather expensive.
  📗
  🐇 ❗️ 🎞 ➡️ 🍨🐚🔡🍆
  📗
    Gets an environment variable by its name. If the variable cannot be found
    ✨ is returned.
  📗
  🐇 ❗️ 🌳 variableName 🔡 ➡️ 🍬🔡 📻 🔤sSystemGetEnv🔤
  📗
    Immediately exits the program with the given status code. The code may
    not be larger than 255 on most operating systems.
  📗
  🐇 ❗️ 🚪 status 🔢  📻 🔤sSystemExit🔤
  📗
    Returns the standard output of running `command` in a subshell.
  📗
  🐇 ❗️ 🕴 command 🔡  📻 🔤sSystemSystem🔤
  📗
    Returns the current time in seconds since the Epoch in Greenwich Mean Time.
  📗
  🐇 ❗️ 🕰 ➡️ 🔢 📻 🔤sSystemUnixTimestamp🔤
  📗
    Panic. Aborts the program with the provided message.

    >!N Only use this function when the program hits upon an error so serious
    >!N that recovery is impossible.
  📗
  🐇 ❗️ 🤯 message 🔡  📻 🔤sPanic🔤
🍉

📗
  Range, an immutable sequence of numbers. [Read more in the
  language reference.](../../reference/the-s-package.html#-ranges)
📗
🌍 🕊 ⏩ 🍇
  🐊 🔂🐚🔢🍆
  🐊 🐽🐚🔢🍆

  🖍🆕 start 🔢
  🖍🆕 stop 🔢
  🖍🆕 step 🔢

  📗
    Creates a range from *start* to *stop*.
  📗
  🆕 ⏩ 🍼 🛅 start 🔢 🍼 🛅 stop 🔢 
  📗
    Creates a range from *start* to *stop* with the provided *step*.
  📗
  🆕 ⏭ 🍼 🛅 start 🔢 🍼 🛅 stop 🔢 🍼 🛅 step 🔢 
  📗
    Returns the *n*th element of the range. *n* is only valid if
    `start + step * n` is `>= start` and `< stop`. If *n* is invalid, the
    program will panic.
  📗
  ❗️ 🐽 n 🔢 ➡️ 🔢
  📗 Returns the number of numbers in this range. 📗
  ❗️ 🐔 ➡️ 🔢
  📗 Returns an iterator to iterate over the symbols of this string. 📗
  🛅 ❗️ 🍡 ➡️ 🌳🐚🔢🍆
🍉

📗
  Iterator over a 🍨. This iterator does *not* unwrap any values retrieved from
  the list and therefore returns optionals. You can use [[🌳]] to have
  optionals automatically unwrapped.
📗
🌍 🐇 🌱🐚Element ⚪️ 🍆🍇
  🐊 🍡🐚🍬Element🍆
  🐊 🔂🐚🍬Element🍆

  🖍🆕 iteratee 🍨🐚Element🍆
  🖍🆕 index 🔢

  🆕🍼 🛅 iteratee 🍨🐚Element🍆 
  ❗️ 🔽 ➡️ 🍬Element 
  ❓️ 🔽 ➡️ 👌
  📗
    Removes the element last returned by 🔽 from the list. Calling this method
    before having called 🔽 results in undefined behavior.
  📗
  ❗️ 🚯 
  🛅 ❗️ 🍡 ➡️ 🍡🐚🍬Element🍆
🍉

📗
  Pseudo-random number generator. The default implementation relies on
  the Mersenne Twister algorithm.
📗
🌍 📻 🐇 🎰 🍇
  📗
    Creates a new generator and seeds it with a random value, if possible using
    hardware entropy.
  📗
  🆕 📻 🔤sPrngNew🔤
  📗
    Generates an integer. Integers are uniformly distributed on the
    closed interval `[a, b]`.
  📗
  ❗️ 🔢 a 🔢 b 🔢 ➡️ 🔢 📻 🔤sPrngGetInteger🔤
  📗
    Generates a real, where reals are uniformly distributed on the interval
    `[0, 1)`.
  📗
  ❗️ 💯 ➡️ 💯 📻 🔤sPrngGetReal🔤
🍉

📗
  Strings.

  [Read more in the language
  reference.](../../reference/the-s-package.html#-strings)
📗
🌍 🐇 🔡 🍇
  🐊 🔂🐚🍬🔣🍆
  🐊 🐽🐚🍬🔣🍆
  🐊 😛🐚🔡🍆

  🖍🆕 codePoints 🧠
  🖍🆕 count 🔢

  📗 Creates a string by copying the memory from the *memory*. 📗
  ☣️ 🆕 🧠 memory 🧠 🍼 🛅 count 🔢 
  📗
    Waits for the user to input a text and confirm it with enter.
    No new line character is included as part of the string.
    (Via the standard input/output)
  📗
  🆕 👂🏼  📻 🔤sStringReadLine🔤
  📗 Creates a string from the provided list of symbols. 📗
  🆕 🎙 symbolList 🍨🐚🔣🍆 
  📗
    Creates a string by joining all elements into a string separated
    by *separator*.
  📗
  🆕 🍨 list 🍨🐚🔡🍆 separator 🔡 
  📗 Returns the memory area representing the value of this string. 📗
  ❗️ 🧠 ➡️ 🧠
  📗 Puts this 🔡 to the standard output. 📗
  ❗️ 😀  📻 🔤sStringPrint🔤
  📗 Puts this 🔡 to the standard output without adding a new line. 📗
  ❗️ 👄  📻 🔤sStringPrintNoLn🔤
  📗 Returns 👍 if this string is equal to *b*. 📗
  🙌 b 🔡 ➡️ 👌
  📗
    Compares this string to *b* and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  📗
  ❗️ ↔ b 🔡 ➡️ 🔢
  📗
    Returns the characters in a string beginning at the specified location
    through the specified number of characters.
  📗
  ❗️ 🔪 from 🔢 🛅 length 🔢 ➡️ 🔡
  📗
    Finds the first occurrences of *search* in this string. Search is
    performed from left to right.

    Returns the index of the first occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🔍 search 🔡 ➡️ 🍬🔢 📻 🔤sStringFind🔤
  📗
    Finds the first occurrences of a string in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵‍♀ search 🔡 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindFromIndex🔤
  📗 Whether this strings begins with another string. 📗
  ❗️ 🎼 testString 🔡 ➡️ 👌 📻 🔤sStringBeginsWith🔤
  📗 Whether this strings ends with another string. 📗
  ❗️ ⛳ testString 🔡 ➡️ 👌 📻 🔤sStringEndsWith🔤
  📗
    Finds the first occurrences of a symbol in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵‍♂ search 🔣 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindSymbolFromIndex🔤
  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.
  📗
  ❗️ 🔫 separator 🔡 ➡️ 🍨🐚🔡🍆
  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.

    Prefer this method over 🔫❗️ if the separator is just a single character.
  📗
  ❗️ 💣 separator 🔣 ➡️ 🍨🐚🔡🍆
  📗
    The 🔧 method returns a new string, on which whitespace has been removed
    from both ends of a string.
  📗
  ❗️ 🔧 ➡️ 🔡
  📗
    This method returns the number of Unicode code points of this string. This
    is possibly not the number of bytes needed to write the string to a file,
    since Emojicode encodes everything into UTF8.
  📗
  ❗️ 🐔 ➡️ 🔢
  📗
    Returns the number of bytes needed to encode this string into proper UTF8.
  📗
  ❗️ 📐 ➡️ 🔢 📻 🔤sStringUtf8ByteCount🔤
  📗
    This methods tries to construct an integer from this string in the given
    base. It returns the integer or Nothingness if the string does not match the
    regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid
    value in the given base.
  📗
  ❗️ 🔢 base 🔢 ➡️ 🍬🔢 📻 🔤sStringToInt🔤
  📗
    This methods tries to construct a 💯 from this 🔡. It returns the 💯, or ✨
    if the 🔡 does not match the regular expression
    `[+-]?([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?`
    or if it does not represent a valid 💯.
  📗
  ❗️ 💯 ➡️ 🍬💯 📻 🔤sStringToReal🔤
  📗 Creates a new string by appending *symbol*. 📗
  ❗️ 📝 symbol 🔣 ➡️ 🔡 📻 🔤sStringAppendSymbol🔤
  📗 Gets a symbol by its index. 📗
  ❗️ 🐽 index 🔢 ➡️ 🍬🔣
  📗 Converts the string to data encoded as UTF8. 📗
  ❗️ 📇 ➡️ 📇 📻 🔤sStringToData🔤
  📗
    Hashes this string.
    The results for strings whose values equal are guaranteed to be the same
    within a process.
  📗
  ❗️ ⚗ ➡️ 🔢 📻 🔤sStringHash🔤
  📗 Returns an array with the symbols from this string. 📗
  ❗️ 🎶 ➡️ 🍨🐚🔣🍆
  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to uppercase.
  📗
  ❗️ 📫 ➡️ 🔡 📻 🔤sStringToUppercase🔤
  📗
    Returns a new string in which at least all letters contained in ASCII
    were converted to lowercase.
  📗
  ❗️ 📪 ➡️ 🔡 📻 🔤sStringToLowercase🔤
  📗 Returns an iterator to iterate over the symbols of this string. 📗
  🛅 ❗️ 🍡 ➡️ 🌳🐚🍬🔣🍆
🍉

🐋 🔣 🍇
🍉

📗 Mutable sequence of characters (“string builder”). 📗
🌍 🐇 🔠 🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  📗 Creates an empty 🔠 with an initial capacity of 16. 📗
  🆕
  📗 Creates an empty 🔠 with the provided *capacity*. 📗
  🆕 🐧 🛅 capacity 🔢 
  📗 Adds the symbols of *string* to this 🔠. 📗
  ❗️ 🐻 string 🔡 
  📗 Returns the memory area representing the data of this 🔠. 📗
  ❗️ 🧠 ➡️ 🧠
  📗 Returns the number of symbols. 📗
  ❗️ 🐔 ➡️ 🔢
  📗 Returns the value of this this 🔠 as a 🔡. 📗
  ❗️ 🔡 ➡️ 🔡
🍉

🐋 🔡 🍇
🍉

📗
  List, an ordered mutable collection.

  [Read more in the
  language reference.](../../reference/the-s-package.html#-lists)
📗
🌍 🐇 🍨🐚Element ⚪️ 🍆🍇
  🐊 🔂🐚Element🍆
  🐊 🐽🐚Element🍆

  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  📗 Creates an empty list. 📗
  🆕 🐸 
  📗 Creates an empty list with the given initial capacity. 📗
  🆕 🐴 🛅 capacity 🔢 
  📗 Creates an containing the specified number of a single, repeated value. 📗
  🆕 🦊 🛅 repeatedValue Element  🍼 🛅 count 🔢 
  📗 Creates a shallow copy of the given list. 📗
  🆕 🐮 list 🍨🐚Element🍆 
  📗 Appends `item` to the end of the list in `O(1)`. 📗
  ❗️ 🐻 🛅 item Element  
  📗
    Gets the item at *index* in `O(1)`. *index* must be greater than 0 and less
    than [[🐔❗️]] or the program will panic.
  📗
  ❗️ 🐽 index 🔢 ➡️ Element 
  📗
    Sets *value* at *index*. *index* must be greater than 0 and less
    than [[🐔❗️]] or the program will panic.
  📗
  ❗️ 🐷 index 🔢 🛅 value Element  
  📗
    Removes the item at `index` and shifts all following items to the left in
    `O(n)`.

    Returns 👍 unless the index is out of range.
 📗
  ❗️ 🐨 index 🔢 ➡️ 👌
  📗
    Inserts the given values before the element with the given index.

    All items beginning from `index` are shifted to the right and `item` is
    then inserted at `index`. Complexity: `O(n)`.
 📗
  ❗️ 🐵 index 🔢 🛅 item Element  ➡️ 👌
  📗 Returns the number of items in the list. 📗
  ❗️ 🐔 ➡️ 🔢
  📗 Appends the content of `list` to this list. Complexity: `O(n)`. 📗
  ❗️ 🐥 list 🍨🐚Element🍆 
  📗
    Removes the last item from the list and returns it in `O(1)`.
    If the list is empty ✨ is returned.
  📗
  ❗️ 🐼 ➡️ 🍬Element 
  📗
    Removes all elements from the list but keeps the list’s capacity.

    This can be much more efficient than using a new list. Complexity: `O(n)`.
  📗
  ❗️ 🐗 
  📗
    Ensures that the list is large enough to store at least `capacity` elements.

    You should use this method if you plan to heavily use 🐷 with large indices
    in order to avoid automatic, useless allocations.

    Complexity: `O(n)`.
  📗
  ❗️ 🐴 🛅 capacity 🔢 
  📗 Returns the lists current capacity. 📗
  ❓️ 🐴 ➡️ 🔢
  📗
    Sorts this array in place using the quick sort algorithm.

    `comparator` must return an integer less than, equal to, or greater than 0,
    if the first argument is considered respectively less than, equal to, or
    greater than the second.
  📗
  🛅 ❗️ 🦁 comparator 🍇Element Element ➡️🔢🍉 
  📗
    Shuffles the list in place using a Fisher–Yates shuffle.
  📗
  ❗️ 🐹 
  📗
    Calls callback with each element in the list and appends the returned
    value to the end of a new list.
  📗
  🛅 ❗️ 🐰 🐚A ⚪️ 🍆callback 🍇Element ➡️A 🍉 ➡️ 🍨🐚A🍆
  📗
    Returns a new array with all elements that pass the test implemented by
    `callback`.
  📗
  🛅 ❗️ 🐭 callback 🍇Element ➡️👌🍉 ➡️ 🍨🐚Element🍆
  📗
    Tests whether all elements in the array pass the test implemented by
    `callback`.

    The method immdiately returns 👎 if `callback` returned 👎 for one element.
  📗
  🛅 ❗️ 🐯 callback 🍇Element ➡️👌🍉 ➡️ 👌
  📗 Tests whether this array and `other` are equal. 📗
  🙌 🐚A 😛🐚Element🍆 🍆other 🍨🐚A🍆 ➡️ 👌
  📗 Returns an iterator to iterate over the elements of this list. 📗
  🛅 ❗️ 🍡 ➡️ 🌳🐚Element🍆
🍉

📗 Binary data. 📗
🌍 🐇 📇 🍇
  🐊 🐽🐚💧🍆
  🐊 🔂🐚💧🍆
  🐊 😛🐚📇🍆

  🖍🆕 data 🧠
  🖍🆕 count 🔢

  📗 Creates a 📇 instance by copying the memory from the provided memory. 📗
  ☣️ 🆕 🧠 memory 🧠 🍼 🛅 count 🔢 
  ❗️ 🧠 ➡️ 🧠
  📗 Returns 👍 if this is equal to *b*. 📗
  🙌 b 📇 ➡️ 👌
  📗 Returns the number of bytes represented by this instance. 📗
  ❗️ 🐔 ➡️ 🔢
  📗
    Returns the value of the byte at *index*. *index* must be greater than 0
    and less than [[🐔❗️]] or the program will panic.
  📗
  ❗️ 🐽 index 🔢 ➡️ 💧
  📗
    If this object represents the bytes of a UTF8 encoded text this method
    returns a string representing that text. No value is returned if this
    object does not represent a valid UTF8 sequence.
  📗
  ❗️ 🔡 ➡️ 🍬🔡 📻 🔤sDataAsString🔤
  📗
    Returns a copy of the data within the given range. This method employes
    various techniques to make this as efficient as possible.
  📗
  ❗️ 🔪 from 🔢 🛅 length 🔢 ➡️ 📇
  📗
    Finds the first occurrences of *search* in the bytes represented by this
    instance. Search is done from left to right. No value is returned if
    *search* cannot be found. 0 is returned if *search* is empty.
  📗
  ❗️ 🔍 search 📇 offset 🔢 ➡️ 🍬🔢 📻 🔤sDataFindFromIndex🔤
  📗
    Creates a new data object by with the bytes of this instance and *b*
    concatenated.
  📗
  ➕ b 📇 ➡️ 📇
  📗 Returns an iterator to iterate over the bytes of this data object. 📗
  🛅 ❗️ 🍡 ➡️ 🌳🐚💧🍆
🍉

🐇 🐝🐚Key ⚪️ Element ⚪️ 🍆🍇
  🖍🆕 next 🍬🐝🐚Key Element🍆
  🖍🆕 key Key 
  🖍🆕 element Element 
  🖍🆕 hash 🔢

  🆕🍼 🛅 key Key  🍼 🛅 element Element  🍼 🛅 hash 🔢 
  ❗️ 🐽 ➡️ Element 
  ❗️ 🐷 🛅 ele Element  
  ❗️ 🔑 ➡️ Key 
  ❗️ ⚗ ➡️ 🔢
  ❗️ ⏭ ➡️ 🍬🐝🐚Key Element🍆
  ❗️ 🥌 🛅 newEntry 🍬🐝🐚Key Element🍆 
  🛅 ❗️ 🐻 🛅 newEntry 🐝🐚Key Element🍆 
🍉

📗
  Dictionary, holding key value pairs.

  [Read more in the
  language reference.](../../reference/the-s-package.html#-dictionaries)
📗
🌍 🐇 🍯🐚Element ⚪️ 🍆🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 capacity 🔢

  📗 Creates an empty 🍯. 📗
  🆕 🐸 
  📗
    Returns the value assigned to *key*. If key is not in the 🍯 no value is
    returned.
  📗
  ❗️ 🐽 key 🔡 ➡️ 🍬Element 
  📗
    Removes *key* and its assigned value from the 🍯. No action is performed if
    *key* is not in the 🍯.
  📗
  ❗️ 🐨 key 🔡 
  📗 Assings a value to the provided key. 📗
  🛅 ❗️ 🐷 🛅 key 🔡 🛅 value Element  
  📗
    Returns a list consisting of all keys in this 🍯.

    >!N Note that the keys in the returned list are arbitrarily ordered.

  📗
  ❗️ 🐙 ➡️ 🍨🐚🔡🍆
  📗
    Removes all key-value pairs in this 🍯 and returns the number of deleted
    items.
  📗
  ❗️ 🐗 ➡️ 🔢
  📗 Checks whether *key* is in this 🍯. 📗
  ❗️ 🐣 key 🔡 ➡️ 👌
  📗 Returns the number of items. 📗
  ❗️ 🐔 ➡️ 🔢
  🐇 ❗️ 🛷 n 🔢 ➡️ 🔢
🍉

📗
  Execution thread of the program.
📗
🌍 📻 🐇 💈 🍇
  📗
    Creates an new thread and calls the provided callback on the newly
    created thread.
  📗
  🛅 🆕🛅 callback 🍇🍉  📻 🔤sThreadNew🔤
  📗
    Blocks the calling thread until this thread has finished work.
  📗
  ❗️ 🛂  📻 🔤sThreadJoin🔤
  📗
    Suspends the calling thread from execution for at least the number of
    microseconds specified by the argument *microseconds*.
  📗
  🐇 ❗️ ⏲ microseconds 🔢  📻 🔤sThreadDelay🔤
🍉

📗
  Mutex, simple semaphore for thread synchronisation.
  A mutex is a simple semaphore that can be used to
  coordinate access to shared data from multiple concurrent threads.
📗
🌍 📻 🐇 🔐 🍇
  📗
    Creates an new mutex.
  📗
  🆕 📻 🔤sMutexNew🔤
  📗
    Attempts to lock the mutex and waits until it becomes available if it is
    already locked.
  📗
  ❗️ 🔒  📻 🔤sMutexLock🔤
  📗
    Unlocks the mutex.
  📗
  ❗️ 🔓  📻 🔤sMutexUnlock🔤
  📗
    Attempts to lock the mutex and returns immediately. Returns 👍 if the mutex
    could be locked.
  📗
  ❗️ 🔐 ➡️ 👌 📻 🔤sMutexTryLock🔤
🍉

🔗 🔤m🔤 🔤pthread🔤 🔗
